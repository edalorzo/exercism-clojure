(def nucleotides (set [\C \A \G \T]))
(defn count [nuc dna]
  (if-not (nucleotides nuc)
    (throw (IllegalArgumentException. (str "Unknown nucleotide " nuc)))
    (or ((frequencies dna) nuc) 0)))
 
(defn nucleotide-counts [dna] 
  (let [freq (frequencies dna)]
    (for [nuc nucleotides]
      (cons nuc (or (freq nuc) 0)))))
(nucleotide-counts "")
((frequencies "ABC") "A")
(frequencies "ABC")
((frequencies "ABC") \A)
(doc count)
(doc clojure/count)
(doc count)
(def nucleotides (set [\C \A \G \T]))
(defn count [nuc dna]
  (if-not (nucleotides nuc)
    (throw (IllegalArgumentException. (str "Unknown nucleotide " nuc)))
    (or ((frequencies dna) nuc) 0)))
 
(defn nucleotide-counts [dna] 
  (for [nuc nucleotides]
    (count nuc dna)))
      
  (nucleotide-count/nucleotide-counts "GGGGGGGG")
(nucleotide-count/nucleotide-counts "GGGGGGGG")
(nucleotide-counts "GGGGGGGG")
(defn nucleotide-counts [dna] 
  (for [nuc nucleotides]
    [nuc (count nuc dna)]))
(nucleotide-counts "GGGGGGGG")
(apply hash-map (nucleotide-counts "GGGGGGGG"))
(hash-map (nucleotide-counts "GGGGGGGG"))
(apply hash-map (nucleotide-counts "GGGGGGGG"))
(defn nucleotide-counts [dna] 
  (for [nuc nucleotides]
    (cons nuc (count nuc dna)))
)
(nucleotide-counts "GGGGGGGG")
(defn nucleotide-counts [dna] 
  (for [nuc nucleotides]
    (seq nuc (count nuc dna))))
(nucleotide-counts "GGGGGGGG")
(defn nucleotide-counts [dna] 
  (for [nuc nucleotides]
    (seq [nuc (count nuc dna)])))
(nucleotide-counts "GGGGGGGG")
(apply hash-map (nucleotide-counts "GGGGGGGG"))
(doc assoc)
(def nucleotides (set [\C \A \G \T]))
(defn count [nuc dna]
  (if-not (nucleotides nuc)
    (throw (IllegalArgumentException. (str "Unknown nucleotide " nuc)))
    (or ((frequencies dna) nuc) 0)))
 
(defn nucleotide-counts [dna] 
  (loop [nuc nucleotides freqs {}]
      (if (not-empty nuc)
        (let [head (first nuc)
              tail (rest nuc)
              many (count head dna)]
          (recur tail (assoc freq head many)))
        freqs)))
(def nucleotides (set [\C \A \G \T]))
(defn count [nuc dna]
  (if-not (nucleotides nuc)
    (throw (IllegalArgumentException. (str "Unknown nucleotide " nuc)))
    (or ((frequencies dna) nuc) 0)))
 
(defn nucleotide-counts [dna] 
  (loop [nuc nucleotides freqs {}]
      (if (not-empty nuc)
        (let [head (first nuc)
              tail (rest nuc)
              many (count head dna)]
          (recur tail (assoc freqs head many)))
        freqs)))
(nucleotide-counts "GGGGG")
(doc zip)
(doc zipmap)
(zipmap [a b c d] [1 2 3 4])
(zipmap [:a :b :c :d] [1 2 3 4])
(defn distance [a b]
  (when (= (count a) (count b))
    (let [accumulte (fn [m k v] (if (not= k v) (+ m 1) 0))]
      (reduce-kv accumulte 0 (zipmap a b)))))
(distance "" "")
(defn distance [a b]
  (when (= (count a) (count b))
    (let [accumulte (fn [m k v] (if (not= k v) (+ m 1) 0))]
      (reduce-kv accumulte 0 (zipmap a b)))))
(distance "" "")
(distance "GGACTGA" "GGACTGA")
(count "GGACTGA")
(def accumulte (fn [m k v] (if (not= k v) (+ m 1) 0)))
(distance "ACT" "GGA")
(distance "ACCAGGG" "ACTATGG")
(zipmap "ACCAGGG" "ACTATGG")
(interleave "ACCAGGG" "ACTATGG")
(defn distance [a b]
  (when (= (count a) (count b))
    (if (not-empty a)
      (let [k (first a)
            v (first b)
            acc (distance (rest a) (rest b))]
        (if (= k v) (+ acc 1) acc))
      0)))
(distance "ACCAGGG" "ACTATGG")
distance "ACCAGGG" "ACTATGG"
(distance "ACCAGGG" "ACTATGG")
(distance "A" "A")
(defn distance [a b]
  (when (= (count a) (count b))
    (if (not-empty a)
      (let [k (first a)
            v (first b)
            acc (distance (rest a) (rest b))]
        (if (not= k v) (+ acc 1) acc))
      0)))
    
(distance "A" "A")
(distance "ACCAGGG" "ACTATGG")
(distance "AAAC" "TAGGGGAGGCTAGCGGTAGGAC")
(doc map)
(map = "abc" "abc")
(map = "abc" "abc" "abc")
(map = "abc" "abc" "abd")
